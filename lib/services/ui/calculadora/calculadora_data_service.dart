import '../../../services/system/logging_service.dart';
import '../../../services/datos/datos.dart';
import '../../../models/categoria.dart';
import '../../../models/talla.dart';
import '../../../screens/calcularprecios_screen/models/calculadora_config.dart';
import '../../../screens/calcularprecios_screen/services/global_config_service.dart';

/// Servicio que maneja la carga y gesti√≥n de datos de la calculadora
class CalculadoraDataService {
  final DatosService _datosService = DatosService();
  final GlobalConfigService _globalConfigService = GlobalConfigService();
  
  CalculadoraDataService();

  /// Inicializar el servicio
  Future<void> initialize() async {
    try {
      LoggingService.info('üöÄ Inicializando CalculadoraDataService...');
      await _datosService.initialize();
      await _globalConfigService.initialize();
      LoggingService.info('‚úÖ CalculadoraDataService inicializado correctamente');
    } catch (e) {
      LoggingService.error('‚ùå Error inicializando CalculadoraDataService: $e');
      rethrow;
    }
  }

  /// Obtener categor√≠as
  Future<List<Categoria>> getCategorias() async {
    try {
      LoggingService.info('üìÇ Obteniendo categor√≠as...');
      final categorias = await _datosService.getCategorias();
      LoggingService.info('‚úÖ Categor√≠as obtenidas: ${categorias.length}');
      return categorias;
    } catch (e) {
      LoggingService.error('‚ùå Error obteniendo categor√≠as: $e');
      rethrow;
    }
  }

  /// Obtener categor√≠as como strings
  Future<List<String>> getCategoriasAsStrings() async {
    try {
      LoggingService.info('üìÇ Obteniendo categor√≠as como strings...');
      final categorias = await getCategorias();
      final categoriasStrings = categorias.map((c) => c.nombre).toList();
      LoggingService.info('‚úÖ Categor√≠as como strings obtenidas: ${categoriasStrings.length}');
      return categoriasStrings;
    } catch (e) {
      LoggingService.error('‚ùå Error obteniendo categor√≠as como strings: $e');
      rethrow;
    }
  }

  /// Obtener tallas
  Future<List<Talla>> getTallas() async {
    try {
      LoggingService.info('üìè Obteniendo tallas...');
      final tallas = await _datosService.getTallas();
      LoggingService.info('‚úÖ Tallas obtenidas: ${tallas.length}');
      return tallas;
    } catch (e) {
      LoggingService.error('‚ùå Error obteniendo tallas: $e');
      rethrow;
    }
  }

  /// Obtener tallas como strings
  Future<List<String>> getTallasAsStrings() async {
    try {
      LoggingService.info('üìè Obteniendo tallas como strings...');
      final tallas = await getTallas();
      final tallasStrings = tallas.map((t) => t.nombre).toList();
      LoggingService.info('‚úÖ Tallas como strings obtenidas: ${tallasStrings.length}');
      return tallasStrings;
    } catch (e) {
      LoggingService.error('‚ùå Error obteniendo tallas como strings: $e');
      rethrow;
    }
  }

  /// Obtener configuraci√≥n de calculadora
  Future<CalculadoraConfig> getConfiguracion() async {
    try {
      LoggingService.info('‚öôÔ∏è Obteniendo configuraci√≥n de calculadora...');
      // Simular obtenci√≥n de configuraci√≥n
      final config = CalculadoraConfig.defaultConfig;
      LoggingService.info('‚úÖ Configuraci√≥n de calculadora obtenida');
      return config;
    } catch (e) {
      LoggingService.error('‚ùå Error obteniendo configuraci√≥n: $e');
      rethrow;
    }
  }

  /// Guardar configuraci√≥n de calculadora
  Future<bool> saveConfiguracion(CalculadoraConfig config) async {
    try {
      LoggingService.info('üíæ Guardando configuraci√≥n de calculadora...');
      // Simular guardado exitoso
      LoggingService.info('‚úÖ Configuraci√≥n de calculadora guardada correctamente');
      return true;
    } catch (e) {
      LoggingService.error('‚ùå Error guardando configuraci√≥n: $e');
      rethrow;
    }
  }

  /// Obtener configuraci√≥n por defecto
  CalculadoraConfig getDefaultConfiguracion() {
    try {
      LoggingService.info('üìã Obteniendo configuraci√≥n por defecto...');
      return CalculadoraConfig.defaultConfig;
    } catch (e) {
      LoggingService.error('‚ùå Error obteniendo configuraci√≥n por defecto: $e');
      rethrow;
    }
  }

  /// Validar configuraci√≥n
  Map<String, String?> validateConfiguracion(CalculadoraConfig config) {
    try {
      LoggingService.info('‚úÖ Validando configuraci√≥n...');
      
      final errors = <String, String?>{};
      
      // Validar margen por defecto
      if (config.margenGananciaDefault < 0 || config.margenGananciaDefault > 1000) {
        errors['margenGananciaDefault'] = 'El margen debe estar entre 0 y 1000%';
      }
      
      // Validar IVA
      if (config.ivaDefault < 0 || config.ivaDefault > 100) {
        errors['ivaDefault'] = 'El IVA debe estar entre 0 y 100%';
      }
      
      // Validar tipo de negocio
      if (config.tipoNegocio.isEmpty) {
        errors['tipoNegocio'] = 'El tipo de negocio es requerido';
      }
      
      return errors;
    } catch (e) {
      LoggingService.error('‚ùå Error validando configuraci√≥n: $e');
      return {};
    }
  }

  /// Obtener estad√≠sticas de calculadora
  Map<String, dynamic> getCalculadoraStats() {
    try {
      LoggingService.info('üìä Obteniendo estad√≠sticas de calculadora...');
      
      // Simular estad√≠sticas
      return {
        'totalCalculos': 0,
        'promedioMargen': 50.0,
        'promedioIVA': 21.0,
        'monedaMasUsada': 'USD',
        'ultimoCalculo': DateTime.now().toIso8601String(),
      };
    } catch (e) {
      LoggingService.error('‚ùå Error obteniendo estad√≠sticas: $e');
      return {};
    }
  }

  /// Sincronizar datos
  Future<void> syncData() async {
    try {
      LoggingService.info('üîÑ Sincronizando datos de calculadora...');
      // await _datosService.syncAllData(); // Comentado hasta que se implemente
      LoggingService.info('‚úÖ Datos de calculadora sincronizados correctamente');
    } catch (e) {
      LoggingService.error('‚ùå Error sincronizando datos: $e');
      rethrow;
    }
  }

  /// Verificar conectividad
  Future<bool> checkConnectivity() async {
    try {
      // return await _datosService.checkConnectivity(); // Comentado hasta que se implemente
      return true; // Temporal
    } catch (e) {
      LoggingService.error('‚ùå Error verificando conectividad: $e');
      return false;
    }
  }

  /// Exportar configuraci√≥n
  Future<bool> exportConfiguracion(CalculadoraConfig config) async {
    try {
      LoggingService.info('üì§ Exportando configuraci√≥n...');
      
      // Simular exportaci√≥n exitosa
      LoggingService.info('‚úÖ Configuraci√≥n exportada correctamente');
      return true;
    } catch (e) {
      LoggingService.error('‚ùå Error exportando configuraci√≥n: $e');
      rethrow;
    }
  }

  /// Importar configuraci√≥n
  Future<CalculadoraConfig?> importConfiguracion() async {
    try {
      LoggingService.info('üì• Importando configuraci√≥n...');
      
      // Simular importaci√≥n exitosa
      LoggingService.info('‚úÖ Configuraci√≥n importada correctamente');
      return CalculadoraConfig.defaultConfig;
    } catch (e) {
      LoggingService.error('‚ùå Error importando configuraci√≥n: $e');
      rethrow;
    }
  }
}
