import '../../../models/producto.dart';
import '../../../services/datos/datos.dart';
import '../../../services/system/logging_service.dart';
import 'inventario_state_service.dart';
import '../../../screens/inventario_screen/functions/inventario_functions.dart';

/// Servicio que maneja la l√≥gica de negocio del inventario
class InventarioLogicService {
  final DatosService _datosService = DatosService();
  final InventarioStateService _stateService = InventarioStateService(); // Usa singleton

  /// Inicializar el servicio
  Future<void> initialize() async {
    try {
      LoggingService.info('üöÄ Inicializando InventarioLogicService...');
      await _datosService.initialize();
      LoggingService.info('‚úÖ InventarioLogicService inicializado correctamente');
    } catch (e) {
      LoggingService.error('‚ùå Error inicializando InventarioLogicService: $e');
      _stateService.updateError('Error inicializando servicio: $e');
    }
  }

  /// Cargar productos
  Future<void> loadProductos() async {
    try {
      _stateService.updateCargando(true);
      _stateService.clearError();
      
      LoggingService.info('üì¶ Cargando productos...');
      final productos = await _datosService.getProductos();
      
      _stateService.updateProductos(productos);
      _stateService.updateCargando(false);
      
      LoggingService.info('‚úÖ Productos cargados: ${productos.length}');
    } catch (e) {
      LoggingService.error('‚ùå Error cargando productos: $e');
      _stateService.updateError('Error cargando productos: $e');
      _stateService.updateCargando(false);
    }
  }

  /// Cargar categor√≠as
  Future<void> loadCategorias() async {
    try {
      LoggingService.info('üè∑Ô∏è Cargando categor√≠as...');
      final categorias = await _datosService.getCategorias();
      
      _stateService.updateCategorias(categorias);
      
      LoggingService.info('‚úÖ Categor√≠as cargadas: ${categorias.length}');
    } catch (e) {
      LoggingService.error('‚ùå Error cargando categor√≠as: $e');
      _stateService.updateError('Error cargando categor√≠as: $e');
    }
  }

  /// Cargar tallas
  Future<void> loadTallas() async {
    try {
      LoggingService.info('üìè Cargando tallas...');
      final tallas = await _datosService.getTallas();
      
      _stateService.updateTallas(tallas);
      
      LoggingService.info('‚úÖ Tallas cargadas: ${tallas.length}');
    } catch (e) {
      LoggingService.error('‚ùå Error cargando tallas: $e');
      _stateService.updateError('Error cargando tallas: $e');
    }
  }

  /// Cargar todos los datos
  Future<void> loadAllData() async {
    try {
      LoggingService.info('üìä Cargando todos los datos del inventario...');
      
      await Future.wait([
        loadProductos(),
        loadCategorias(),
        loadTallas(),
      ]);
      
      LoggingService.info('‚úÖ Todos los datos cargados correctamente');
    } catch (e) {
      LoggingService.error('‚ùå Error cargando datos: $e');
      _stateService.updateError('Error cargando datos: $e');
    }
  }

  /// Filtrar productos
  List<Producto> getProductosFiltrados() {
    return InventarioFunctions.filterProductos(
      _stateService.productos.cast<Producto>(),
      categoria: _stateService.filtroCategoria,
      talla: _stateService.filtroTalla,
      busqueda: _stateService.busqueda,
      mostrarSoloStockBajo: _stateService.mostrarSoloStockBajo,
    );
  }

  /// Eliminar producto
  Future<bool> eliminarProducto(int productoId) async {
    try {
      LoggingService.info('üóëÔ∏è Eliminando producto: $productoId');
      
      await _datosService.deleteProducto(productoId);
      
      // Recargar productos despu√©s de eliminar
      await loadProductos();
      
      LoggingService.info('‚úÖ Producto eliminado correctamente');
      return true;
    } catch (e) {
      LoggingService.error('‚ùå Error eliminando producto: $e');
      _stateService.updateError('Error eliminando producto: $e');
      return false;
    }
  }

  /// Obtener estad√≠sticas del inventario
  Map<String, dynamic> getEstadisticas() {
    final productosFiltrados = getProductosFiltrados();
    
    return {
      'totalProductos': InventarioFunctions.calcularTotalProductos(productosFiltrados),
      'stockBajo': InventarioFunctions.calcularStockBajo(productosFiltrados),
      'valorTotal': InventarioFunctions.calcularValorTotal(productosFiltrados),
      'productosFiltrados': productosFiltrados.length,
    };
  }

  /// Obtener datos para lazy loading
  Future<List<Producto>> getProductosLazy({
    required int page,
    required int limit,
    Map<String, dynamic>? filters,
  }) async {
    try {
      return await _datosService.getProductosLazy(
        page: page,
        limit: limit,
        filters: filters ?? _stateService.getCurrentFilters(),
      );
    } catch (e) {
      LoggingService.error('‚ùå Error en lazy loading: $e');
      return [];
    }
  }

  /// Recargar datos
  Future<void> refreshData() async {
    try {
      LoggingService.info('üîÑ Recargando datos del inventario...');
      await loadAllData();
      LoggingService.info('‚úÖ Datos recargados correctamente');
    } catch (e) {
      LoggingService.error('‚ùå Error recargando datos: $e');
      _stateService.updateError('Error recargando datos: $e');
    }
  }

  /// Actualizar categor√≠as despu√©s de gesti√≥n
  void updateCategorias(List<dynamic> nuevasCategorias) {
    try {
      LoggingService.info('üè∑Ô∏è Actualizando categor√≠as: ${nuevasCategorias.length}');
      _stateService.updateCategorias(nuevasCategorias.cast());
      LoggingService.info('‚úÖ Categor√≠as actualizadas correctamente');
    } catch (e) {
      LoggingService.error('‚ùå Error actualizando categor√≠as: $e');
      _stateService.updateError('Error actualizando categor√≠as: $e');
    }
  }

  /// Actualizar tallas despu√©s de gesti√≥n
  void updateTallas(List<dynamic> nuevasTallas) {
    try {
      LoggingService.info('üìè Actualizando tallas: ${nuevasTallas.length}');
      _stateService.updateTallas(nuevasTallas.cast());
      LoggingService.info('‚úÖ Tallas actualizadas correctamente');
    } catch (e) {
      LoggingService.error('‚ùå Error actualizando tallas: $e');
      _stateService.updateError('Error actualizando tallas: $e');
    }
  }

  /// Obtener categor√≠as para gesti√≥n
  List<dynamic> getCategoriasParaGestion() {
    return _stateService.categorias.cast<dynamic>();
  }

  /// Obtener tallas para gesti√≥n
  List<dynamic> getTallasParaGestion() {
    return _stateService.tallas.cast<dynamic>();
  }

  /// Obtener productos para gesti√≥n
  List<dynamic> getProductosParaGestion() {
    return _stateService.productos.cast<dynamic>();
  }

  /// Eliminar categor√≠a de la base de datos
  Future<bool> eliminarCategoria(int categoriaId) async {
    try {
      LoggingService.info('üóëÔ∏è Eliminando categor√≠a: $categoriaId');
      
      await _datosService.deleteCategoria(categoriaId);
      
      // Recargar categor√≠as despu√©s de eliminar
      await loadCategorias();
      
      LoggingService.info('‚úÖ Categor√≠a eliminada correctamente');
      return true;
    } catch (e) {
      LoggingService.error('‚ùå Error eliminando categor√≠a: $e');
      _stateService.updateError('Error eliminando categor√≠a: $e');
      return false;
    }
  }

  /// Eliminar talla de la base de datos
  Future<bool> eliminarTalla(int tallaId) async {
    try {
      LoggingService.info('üóëÔ∏è Eliminando talla: $tallaId');
      
      await _datosService.deleteTalla(tallaId);
      
      // Recargar tallas despu√©s de eliminar
      await loadTallas();
      
      LoggingService.info('‚úÖ Talla eliminada correctamente');
      return true;
    } catch (e) {
      LoggingService.error('‚ùå Error eliminando talla: $e');
      _stateService.updateError('Error eliminando talla: $e');
      return false;
    }
  }

  /// Verificar si se puede eliminar una categor√≠a
  Future<bool> puedeEliminarCategoria(int categoriaId, String nombreCategoria) async {
    try {
      final productos = _stateService.productos.cast<Producto>();
      final productosConCategoria = productos.where((p) => p.categoria == nombreCategoria).toList();
      
      if (productosConCategoria.isNotEmpty) {
        LoggingService.warning('‚ö†Ô∏è No se puede eliminar categor√≠a "$nombreCategoria": tiene ${productosConCategoria.length} productos asociados');
        return false;
      }
      
      return true;
    } catch (e) {
      LoggingService.error('‚ùå Error verificando eliminaci√≥n de categor√≠a: $e');
      return false;
    }
  }

  /// Verificar si se puede eliminar una talla
  Future<bool> puedeEliminarTalla(int tallaId, String nombreTalla) async {
    try {
      final productos = _stateService.productos.cast<Producto>();
      final productosConTalla = productos.where((p) => p.talla == nombreTalla).toList();
      
      if (productosConTalla.isNotEmpty) {
        LoggingService.warning('‚ö†Ô∏è No se puede eliminar talla "$nombreTalla": tiene ${productosConTalla.length} productos asociados');
        return false;
      }
      
      return true;
    } catch (e) {
      LoggingService.error('‚ùå Error verificando eliminaci√≥n de talla: $e');
      return false;
    }
  }
}
