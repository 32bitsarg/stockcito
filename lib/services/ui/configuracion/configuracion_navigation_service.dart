import 'package:flutter/material.dart';
import '../../../services/system/logging_service.dart';
import '../../../screens/configuracion_screen/functions/configuracion_functions.dart';

/// Servicio que maneja la navegaci√≥n de la configuraci√≥n
class ConfiguracionNavigationService {
  ConfiguracionNavigationService();

  /// Mostrar mensaje de √©xito
  void showSuccessMessage(BuildContext context, String message) {
    try {
      ConfiguracionFunctions.showSuccessSnackBar(context, message);
    } catch (e) {
      LoggingService.error('‚ùå Error mostrando mensaje de √©xito: $e');
    }
  }

  /// Mostrar mensaje de error
  void showErrorMessage(BuildContext context, String message) {
    try {
      ConfiguracionFunctions.showErrorSnackBar(context, message);
    } catch (e) {
      LoggingService.error('‚ùå Error mostrando mensaje de error: $e');
    }
  }

  /// Mostrar di√°logo de confirmaci√≥n
  Future<bool> showConfirmationDialog(
    BuildContext context,
    String title,
    String message,
  ) async {
    try {
      LoggingService.info('‚ùì Mostrando di√°logo de confirmaci√≥n: $title');
      
      final result = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: Text(title),
          content: Text(message),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Cancelar'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text('Confirmar'),
            ),
          ],
        ),
      );
      
      return result ?? false;
    } catch (e) {
      LoggingService.error('‚ùå Error mostrando di√°logo de confirmaci√≥n: $e');
      return false;
    }
  }

  /// Mostrar di√°logo de importaci√≥n de configuraci√≥n
  Future<Map<String, dynamic>?> showImportDialog(BuildContext context) async {
    try {
      LoggingService.info('üì• Mostrando di√°logo de importaci√≥n');
      
      // Simular selecci√≥n de archivo
      final result = await showDialog<Map<String, dynamic>>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Importar Configuraci√≥n'),
          content: const Text('¬øDeseas importar la configuraci√≥n desde un archivo?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancelar'),
            ),
            ElevatedButton(
              onPressed: () {
                // Simular configuraci√≥n importada
                Navigator.of(context).pop({
                  'margenDefecto': 45.0,
                  'iva': 19.0,
                  'moneda': 'EUR',
                  'notificacionesStock': true,
                  'notificacionesVentas': true,
                  'exportarAutomatico': true,
                  'respaldoAutomatico': true,
                  'mlConsentimiento': true,
                  'stockMinimo': 10,
                });
              },
              child: const Text('Importar'),
            ),
          ],
        ),
      );
      
      return result;
    } catch (e) {
      LoggingService.error('‚ùå Error mostrando di√°logo de importaci√≥n: $e');
      return null;
    }
  }

  /// Mostrar di√°logo de exportaci√≥n de configuraci√≥n
  Future<bool> showExportDialog(BuildContext context) async {
    try {
      LoggingService.info('üì§ Mostrando di√°logo de exportaci√≥n');
      
      final result = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Exportar Configuraci√≥n'),
          content: const Text('¬øDeseas exportar la configuraci√≥n actual a un archivo?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Cancelar'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text('Exportar'),
            ),
          ],
        ),
      );
      
      return result ?? false;
    } catch (e) {
      LoggingService.error('‚ùå Error mostrando di√°logo de exportaci√≥n: $e');
      return false;
    }
  }

  /// Mostrar di√°logo de resetear configuraci√≥n
  Future<bool> showResetDialog(BuildContext context) async {
    try {
      LoggingService.info('üîÑ Mostrando di√°logo de reset');
      
      final result = await showConfirmationDialog(
        context,
        'Resetear Configuraci√≥n',
        '¬øEst√°s seguro de que deseas resetear toda la configuraci√≥n a los valores por defecto? Esta acci√≥n no se puede deshacer.',
      );
      
      return result;
    } catch (e) {
      LoggingService.error('‚ùå Error mostrando di√°logo de reset: $e');
      return false;
    }
  }

  /// Mostrar di√°logo de consentimiento ML
  Future<bool> showMLConsentDialog(BuildContext context) async {
    try {
      LoggingService.info('ü§ñ Mostrando di√°logo de consentimiento ML');
      
      final result = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Consentimiento para Machine Learning'),
          content: const Text(
            '¬øDeseas otorgar consentimiento para el uso de Machine Learning? '
            'Esto nos permitir√° mejorar las recomendaciones y an√°lisis autom√°ticos.'
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('No'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text('S√≠'),
            ),
          ],
        ),
      );
      
      return result ?? false;
    } catch (e) {
      LoggingService.error('‚ùå Error mostrando di√°logo de consentimiento ML: $e');
      return false;
    }
  }

  /// Navegar a configuraci√≥n avanzada
  void navigateToAdvancedSettings(BuildContext context) {
    try {
      LoggingService.info('‚öôÔ∏è Navegando a configuraci√≥n avanzada');
      // Implementar navegaci√≥n si es necesario
    } catch (e) {
      LoggingService.error('‚ùå Error navegando a configuraci√≥n avanzada: $e');
    }
  }

  /// Navegar a configuraci√≥n de backup
  void navigateToBackupSettings(BuildContext context) {
    try {
      LoggingService.info('üíæ Navegando a configuraci√≥n de backup');
      // Implementar navegaci√≥n si es necesario
    } catch (e) {
      LoggingService.error('‚ùå Error navegando a configuraci√≥n de backup: $e');
    }
  }
}
