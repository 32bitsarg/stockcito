import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:stockcito/config/supabase_config.dart';
import 'package:stockcito/services/system/logging_service.dart';
import 'package:stockcito/services/datos/datos.dart';
import 'package:stockcito/services/auth/security_service.dart';
import 'package:stockcito/services/auth/password_validation_service.dart';
import 'package:stockcito/services/system/sentry_service.dart';
import 'package:stockcito/services/auth/user_migration_service.dart';

/// Servicio de autenticaci√≥n con Supabase
class SupabaseAuthService {
  static final SupabaseAuthService _instance = SupabaseAuthService._internal();
  factory SupabaseAuthService() => _instance;
  SupabaseAuthService._internal();

  DatosService? _datosService;
  
  User? get currentUser => Supabase.instance.client.auth.currentUser;
  String? get currentUserId => currentUser?.id;
  String? get currentUserEmail => currentUser?.email;
  String? get currentUserName => currentUser?.userMetadata?['full_name'] ?? 
                                (currentUser?.isAnonymous == true ? 'Usuario An√≥nimo' : currentUser?.email?.split('@')[0]);
  bool get isSignedIn => currentUser != null;
  bool get isAnonymous => currentUser?.isAnonymous ?? false;
  
  
  /// Inicializa la dependencia de DatosService
  void initializeDatosService(DatosService datosService) {
    _datosService = datosService;
  }

  /// Inicializa el servicio de autenticaci√≥n
  Future<void> initialize() async {
    try {
      LoggingService.info('Inicializando servicio de autenticaci√≥n...');
      
      // Inicializar Supabase
      await Supabase.initialize(
        url: SupabaseConfig.supabaseUrl,
        anonKey: SupabaseConfig.supabaseAnonKey,
      );
      
      // Configurar listener de cambios de autenticaci√≥n
      Supabase.instance.client.auth.onAuthStateChange.listen((data) {
        final AuthChangeEvent event = data.event;
        
        if (event == AuthChangeEvent.signedIn) {
          LoggingService.info('Usuario autenticado correctamente');
          
          // Configurar contexto de usuario en Sentry
          final user = data.session?.user;
          if (user != null) {
            SentryService.setUserContext(
              id: user.id,
              email: user.email,
              username: user.userMetadata?['full_name'] ?? user.email?.split('@')[0],
              extra: {
                'is_anonymous': user.isAnonymous,
                'created_at': user.createdAt,
              },
            );
          }
        } else if (event == AuthChangeEvent.signedOut) {
          LoggingService.info('Usuario desconectado');
          
          // Limpiar contexto de usuario en Sentry
          SentryService.setUserContext();
        }
      });
      
      // NO crear sesi√≥n an√≥nima autom√°ticamente - solo inicializar Supabase
      LoggingService.info('Servicio de autenticaci√≥n inicializado correctamente');
    } catch (e) {
      LoggingService.error('Error inicializando servicio de autenticaci√≥n: $e');
    }
  }

  /// Inicia sesi√≥n con email y contrase√±a
  Future<bool> signInWithEmailAndPassword(String email, String password) async {
    try {
      // Verificar si el usuario est√° bloqueado
      if (await SecurityService().isUserBlocked()) {
        LoggingService.warning('Usuario bloqueado por demasiados intentos');
        return false;
      }
      
      // Sanitizar entrada
      final cleanEmail = SecurityService().sanitizeInput(email);
      
      LoggingService.info('Iniciando sesi√≥n con email');
      
      final AuthResponse response = await Supabase.instance.client.auth.signInWithPassword(
        email: cleanEmail,
        password: password,
      );
      
      if (response.user != null) {
        // Limpiar intentos fallidos en login exitoso
        await SecurityService().clearFailedLoginAttempts();
        await _saveAuthState('email', cleanEmail);
        LoggingService.info('Sesi√≥n iniciada correctamente');
        return true;
      }
      
      return false;
    } catch (e) {
      // Registrar intento fallido
      await SecurityService().recordFailedLoginAttempt();
      LoggingService.error('Error iniciando sesi√≥n: $e');
      return false;
    }
  }

  /// Crea una cuenta con email y contrase√±a
  Future<bool> createUserWithEmailAndPassword(
    String email, 
    String password, 
    String displayName
  ) async {
    try {
      // Validar contrase√±a robusta
      final passwordValidation = PasswordValidationService.validatePassword(password);
      if (!passwordValidation.isValid) {
        throw Exception(passwordValidation.errors.first);
      }
      
      // Sanitizar entradas
      final cleanEmail = SecurityService().sanitizeInput(email);
      final cleanName = SecurityService().sanitizeInput(displayName);
      
      LoggingService.info('Creando cuenta con email');
      
      final AuthResponse response = await Supabase.instance.client.auth.signUp(
        email: cleanEmail,
        password: password,
        data: {
          'full_name': cleanName,
        },
      );
      
      if (response.user != null) {
        await _saveAuthState('email', cleanEmail);
        LoggingService.info('Cuenta creada correctamente');
        return true;
      }
      
      LoggingService.error('Error: Usuario no creado');
      return false;
    } catch (e) {
      LoggingService.error('Error creando cuenta: $e');
      // Re-lanzar el error para que la UI pueda mostrarlo
      throw Exception('Error al crear cuenta: $e');
    }
  }

  /// Inicia sesi√≥n an√≥nima usando Supabase nativo
  Future<bool> signInAnonymously() async {
    try {
      LoggingService.info('üîê Iniciando sesi√≥n an√≥nima...');
      
      // Verificar si ya hay una sesi√≥n an√≥nima activa
      final currentSession = Supabase.instance.client.auth.currentSession;
      if (currentSession?.user.isAnonymous == true) {
        LoggingService.info('‚úÖ Reutilizando sesi√≥n an√≥nima existente con ID: ${currentSession!.user.id}');
        await _saveAuthState('anonymous', 'anonymous');
        return true;
      }
      
      // Verificar si hay un user_id an√≥nimo persistido
      final persistedAnonymousId = await _getPersistedAnonymousUserId();
      if (persistedAnonymousId != null) {
        LoggingService.info('üîÑ Intentando reutilizar user_id an√≥nimo persistido: $persistedAnonymousId');
        
        // Intentar crear sesi√≥n con el ID persistido
        final success = await _tryReuseAnonymousSession(persistedAnonymousId);
        if (success) {
          LoggingService.info('‚úÖ Sesi√≥n an√≥nima reutilizada exitosamente con ID: $persistedAnonymousId');
          await _saveAuthState('anonymous', 'anonymous');
          return true;
        } else {
          LoggingService.warning('‚ö†Ô∏è No se pudo reutilizar sesi√≥n an√≥nima, creando nueva...');
        }
      }
      
      // Crear nueva sesi√≥n an√≥nima
      LoggingService.info('üÜï Creando nueva sesi√≥n an√≥nima...');
      final AuthResponse response = await Supabase.instance.client.auth.signInAnonymously();
      
      if (response.user != null) {
        final newAnonymousId = response.user!.id;
        LoggingService.info('‚úÖ Nueva sesi√≥n an√≥nima creada con ID: $newAnonymousId');
        
        // Persistir el nuevo user_id an√≥nimo
        await _persistAnonymousUserId(newAnonymousId);
        await _saveAuthState('anonymous', 'anonymous');
        
        LoggingService.info('üíæ User_id an√≥nimo persistido para futuras sesiones');
        return true;
      }
      
      LoggingService.error('‚ùå Error: Usuario an√≥nimo no creado');
      return false;
    } catch (e) {
      LoggingService.error('‚ùå Error iniciando sesi√≥n an√≥nima: $e');
      return false;
    }
  }

  /// Inicia sesi√≥n con Google (temporalmente deshabilitado)
  Future<bool> signInWithGoogle() async {
    LoggingService.info('Login con Google temporalmente deshabilitado');
    return false;
  }

  /// Cierra la sesi√≥n actual
  Future<void> signOut() async {
    try {
      LoggingService.info('Cerrando sesi√≥n');
      
      // Guardar datos locales antes de cerrar sesi√≥n
      if (isSignedIn) {
        await _backupLocalData();
      }
      
      // Solo cerrar sesi√≥n en Supabase si NO es un usuario an√≥nimo
      if (!isAnonymous) {
        await Supabase.instance.client.auth.signOut();
        LoggingService.info('Sesi√≥n de usuario permanente cerrada');
      } else {
        LoggingService.info('Manteniendo sesi√≥n an√≥nima activa');
      }
      
      // Google Sign-In temporalmente deshabilitado
      
      // Limpiar estado de seguridad
      await SecurityService().clearFailedLoginAttempts();
      await _clearAuthState();
      LoggingService.info('Sesi√≥n cerrada correctamente');
    } catch (e) {
      LoggingService.error('Error cerrando sesi√≥n: $e');
    }
  }

  /// Cierra sesi√≥n an√≥nima (NO elimina el user_id persistido)
  Future<void> signOutAnonymous() async {
    try {
      LoggingService.info('üîê Cerrando sesi√≥n an√≥nima...');
      
      // Guardar datos locales antes de cerrar sesi√≥n
      if (isSignedIn) {
        await _backupLocalData();
      }
      
      // Cerrar sesi√≥n an√≥nima en Supabase (pero mantener user_id persistido)
      await Supabase.instance.client.auth.signOut();
      
      // NO limpiar el user_id an√≥nimo persistido - solo limpiar estado de sesi√≥n
      await _clearAuthState();
      LoggingService.info('‚úÖ Sesi√≥n an√≥nima cerrada correctamente (user_id persistido)');
    } catch (e) {
      LoggingService.error('‚ùå Error cerrando sesi√≥n an√≥nima: $e');
    }
  }

  /// Convierte cuenta an√≥nima a cuenta permanente usando UserMigrationService
  Future<bool> convertAnonymousToPermanent(
    String email, 
    String password, 
    String displayName
  ) async {
    try {
      if (!isAnonymous || currentUser == null) {
        LoggingService.error('El usuario actual no es an√≥nimo');
        return false;
      }

      LoggingService.info('üîÑ Iniciando conversi√≥n de cuenta an√≥nima a permanente...');
      
      // Importar UserMigrationService din√°micamente para evitar dependencias circulares
      final userMigrationService = UserMigrationService();
      
      // Ejecutar migraci√≥n completa
      final migrationResult = await userMigrationService.migrateAnonymousToAuthenticated(
        email: email,
        password: password,
        displayName: displayName,
      );
      
      if (migrationResult.success) {
        LoggingService.info('‚úÖ Cuenta convertida y datos migrados correctamente');
        return true;
      } else {
        LoggingService.error('‚ùå Error en migraci√≥n: ${migrationResult.error}');
        return false;
      }
    } catch (e) {
      LoggingService.error('‚ùå Error convirtiendo cuenta: $e');
      return false;
    }
  }

  /// Hace backup de datos locales
  Future<void> _backupLocalData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Obtener datos locales
      final productos = await _datosService?.getAllProductos();
      final clientes = await _datosService?.getAllClientes();
      final ventas = await _datosService?.getAllVentas();
      
      // Guardar backup local
      await prefs.setString('backup_productos', json.encode(productos?.map((p) => p.toMap()).toList() ?? []));
      await prefs.setString('backup_clientes', json.encode(clientes?.map((c) => c.toMap()).toList() ?? []));
      await prefs.setString('backup_ventas', json.encode(ventas?.map((v) => v.toMap()).toList() ?? []));
      await prefs.setString('backup_timestamp', DateTime.now().toIso8601String());
      
      LoggingService.info('Backup de datos locales creado');
    } catch (e) {
      LoggingService.error('Error creando backup: $e');
    }
  }

  /// Restaura datos desde backup
  Future<void> restoreLocalData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      final productosJson = prefs.getString('backup_productos');
      
      if (productosJson != null) {
        final productos = json.decode(productosJson) as List;
        // Aqu√≠ implementar√≠as la restauraci√≥n de productos
        LoggingService.info('Productos restaurados: ${productos.length}');
      }
      
      LoggingService.info('Datos locales restaurados');
    } catch (e) {
      LoggingService.error('Error restaurando datos: $e');
    }
  }

  /// Guarda el estado de autenticaci√≥n
  Future<void> _saveAuthState(String method, String identifier) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('auth_method', method);
      await prefs.setString('auth_identifier', identifier);
      await prefs.setString('auth_user_id', currentUser?.id ?? '');
      await prefs.setString('auth_user_email', currentUser?.email ?? '');
      await prefs.setString('auth_user_name', currentUserName ?? '');
      await prefs.setBool('auth_is_anonymous', isAnonymous);
      await prefs.setString('last_auth_time', DateTime.now().toIso8601String());
    } catch (e) {
      LoggingService.error('Error guardando estado de auth: $e');
    }
  }

  /// Limpia el estado de autenticaci√≥n
  Future<void> _clearAuthState() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('auth_method');
      await prefs.remove('auth_identifier');
      await prefs.remove('auth_user_id');
      await prefs.remove('auth_user_email');
      await prefs.remove('auth_user_name');
      await prefs.remove('auth_is_anonymous');
      await prefs.remove('last_auth_time');
    } catch (e) {
      LoggingService.error('Error limpiando estado de auth: $e');
    }
  }

  /// Obtiene informaci√≥n del usuario actual
  Map<String, dynamic> getUserInfo() {
    return {
      'uid': currentUser?.id,
      'email': currentUser?.email,
      'displayName': currentUserName,
      'isAnonymous': isAnonymous,
      'isSignedIn': isSignedIn,
      'photoURL': currentUser?.userMetadata?['avatar_url'],
    };
  }

  /// Verifica si el usuario tiene conexi√≥n a internet
  Future<bool> hasInternetConnection() async {
    try {
      // Implementar verificaci√≥n real de conexi√≥n
      return true;
    } catch (e) {
      return false;
    }
  }

  /// Sincroniza datos cuando se recupera la conexi√≥n
  Future<void> syncOnConnectionRestored() async {
    if (isAnonymous || !isSignedIn) return;
    
    try {
      final hasConnection = await hasInternetConnection();
      if (hasConnection) {
        LoggingService.info('Datos sincronizados al recuperar conexi√≥n');
      }
    } catch (e) {
      LoggingService.error('Error sincronizando al recuperar conexi√≥n: $e');
    }
  }

  // ==================== M√âTODOS DE PERSISTENCIA AN√ìNIMA ====================

  /// Persiste el user_id an√≥nimo para futuras sesiones
  Future<void> _persistAnonymousUserId(String userId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('persisted_anonymous_user_id', userId);
      await prefs.setString('persisted_anonymous_timestamp', DateTime.now().toIso8601String());
      LoggingService.info('üíæ User_id an√≥nimo persistido: $userId');
    } catch (e) {
      LoggingService.error('‚ùå Error persistiendo user_id an√≥nimo: $e');
    }
  }

  /// Obtiene el user_id an√≥nimo persistido
  Future<String?> _getPersistedAnonymousUserId() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userId = prefs.getString('persisted_anonymous_user_id');
      final timestamp = prefs.getString('persisted_anonymous_timestamp');
      
      if (userId != null && timestamp != null) {
        final persistTime = DateTime.parse(timestamp);
        final daysSincePersist = DateTime.now().difference(persistTime).inDays;
        
        LoggingService.info('üîç User_id an√≥nimo persistido encontrado: $userId (hace $daysSincePersist d√≠as)');
        
        // Si han pasado m√°s de 30 d√≠as, considerar expirado
        if (daysSincePersist > 30) {
          LoggingService.warning('‚ö†Ô∏è User_id an√≥nimo expirado (m√°s de 30 d√≠as), limpiando...');
          await _clearPersistedAnonymousUserId();
          return null;
        }
        
        return userId;
      }
      
      LoggingService.info('üîç No se encontr√≥ user_id an√≥nimo persistido');
      return null;
    } catch (e) {
      LoggingService.error('‚ùå Error obteniendo user_id an√≥nimo persistido: $e');
      return null;
    }
  }

  /// Intenta reutilizar una sesi√≥n an√≥nima existente
  Future<bool> _tryReuseAnonymousSession(String userId) async {
    try {
      // Nota: Supabase no permite crear sesiones con user_id espec√≠ficos
      // Por ahora, siempre creamos una nueva sesi√≥n pero mantenemos la referencia al user_id
      // En el futuro se podr√≠a implementar una l√≥gica m√°s sofisticada
      
      LoggingService.info('üîÑ Creando nueva sesi√≥n pero manteniendo referencia al user_id: $userId');
      
      // Crear nueva sesi√≥n an√≥nima
      final AuthResponse response = await Supabase.instance.client.auth.signInAnonymously();
      
      if (response.user != null) {
        // Actualizar el user_id persistido con el nuevo ID de la sesi√≥n
        await _persistAnonymousUserId(response.user!.id);
        LoggingService.info('‚úÖ Nueva sesi√≥n creada con ID: ${response.user!.id} (referencia a: $userId)');
        return true;
      }
      
      return false;
    } catch (e) {
      LoggingService.error('‚ùå Error reutilizando sesi√≥n an√≥nima: $e');
      return false;
    }
  }

  /// Limpia el user_id an√≥nimo persistido
  Future<void> _clearPersistedAnonymousUserId() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('persisted_anonymous_user_id');
      await prefs.remove('persisted_anonymous_timestamp');
      LoggingService.info('üóëÔ∏è User_id an√≥nimo persistido limpiado');
    } catch (e) {
      LoggingService.error('‚ùå Error limpiando user_id an√≥nimo persistido: $e');
    }
  }

  /// Limpia completamente los datos an√≥nimos (para resetear)
  Future<void> clearAnonymousData() async {
    try {
      LoggingService.info('üóëÔ∏è Limpiando todos los datos an√≥nimos...');
      
      // Cerrar sesi√≥n actual si es an√≥nima
      if (isAnonymous) {
        await signOutAnonymous();
      }
      
      // Limpiar user_id persistido
      await _clearPersistedAnonymousUserId();
      
      // Aqu√≠ se podr√≠an agregar m√°s limpiezas si es necesario
      LoggingService.info('‚úÖ Datos an√≥nimos limpiados completamente');
    } catch (e) {
      LoggingService.error('‚ùå Error limpiando datos an√≥nimos: $e');
    }
  }

}
